{
	"info": {
		"_postman_id": "64108028-830d-4651-87b3-7bf497e02df3",
		"name": "Go Rest - Trabalho",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20514449"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os usuários",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vname\", jsonData[0].name);",
											"    pm.collectionVariables.set(\"vemail\", jsonData[0].email);",
											"    pm.collectionVariables.set(\"vgender\", jsonData[0].gender);",
											"    pm.collectionVariables.set(\"vstatus\", jsonData[0].status);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar um usuário específico - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"   pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo sexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.sexo).to.eq(pm.collectionVariables.get(\"vsexo\"));",
											"    });",
											"});;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?sexo={{vgender}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "sexo",
											"value": "{{vgender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pela situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo nome, e-mail, sexo e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&email={{vemail}}&gender={{vgender}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "gender",
											"value": "{{vgender}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo nome e e-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtrar pelo nome e sexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&gender={{vgender}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "gender",
											"value": "{{vgender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Filtrar pelo nome e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Filtrar pelo email e sexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email={{vemail}}&gender={{vgender}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "gender",
											"value": "{{vgender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Filtrar pelo email e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email={{vemail}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Filtrar pelo sexo e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?gender={{vgender}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "gender",
											"value": "{{vgender}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar um usuário que não existe pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/99999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"99999999"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-015] - Buscar um usuário por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?id=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "id",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar usuário por um nome inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name=adfafedeadafaef",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "adfafedeadafaef"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-017] - Buscar usuário por um email inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email=dses",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "dses"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-018] - Buscar usuário por um sexo invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/gender=sexo",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"gender=sexo"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-019] - Buscar usuário por uma situação inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/status=status",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"status=status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Users",
					"item": [
						{
							"name": "[CT001] - Cadastrar um usuário com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.name).to.eq(\"Leticia4\");",
											"    pm.expect(jsonData.email).to.eq(\"leticia4@educa.com\");",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia4\",\n    \"email\": \"leticia4@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002] - Cadastrar um usuário com sucesso - somente campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.name).to.eq(\"Leticia5\");",
											"    pm.expect(jsonData.email).to.eq(\"leticia5@educa.com\");",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia5\",\n    \"email\": \"leticia5@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003] - Cadastrar um usuário - gender female",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia5\",\n    \"email\": \"leticia5@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004] - Cadastrar um usuário - gender male",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.gender).to.eq(\"male\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Fabio\",\n    \"email\": \"fabio@educa.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005] - Cadastrar um usuário - status active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Fabio\",\n    \"email\": \"fabio@educa.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006] - Cadastrar um usuário - status inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.status).to.eq(\"inactive\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Fabio\",\n    \"email\": \"fabio@educa.com\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007] - Cadastrar um usuário sem informar os campos obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"name\");",
											"    pm.expect(jsonData[1].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"name\");",
											"    pm.expect(jsonData[1].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[2]).to.have.property(\"field\");",
											"    pm.expect(jsonData[2]).to.have.property(\"message\");",
											"    pm.expect(jsonData[2].field).to.eq(\"gender\");",
											"    pm.expect(jsonData[2].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"status\");",
											"    pm.expect(jsonData[1].message).to.eq(\"can't be blank\");",
											"",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n   \n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008] - Cadastrar um usuário em duplicidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"has already been taken\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 4342,\n    \"name\": \"Leticia4\",\n    \"email\": \"leticia4@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009] - Cadastrar um usuário - campo nome inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"nome\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"# 00 xx\",\n    \"email\": \"leticia@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010] - Cadastrar um usuário - campo email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia4\",\n    \"email\": \"leticiaeduca.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT011] - Cadastrar um usuário - campo gender inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"gender\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, can be male or female\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia\",\n    \"email\": \"leticiaenz@educa.com\",\n    \"gender\": \"xxxx\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT012] - Cadastrar um usuário - campo status inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"status\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"LeticiaEnz\",\n    \"email\": \"leticia_enz@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"xxxxx\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca o usuário cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleta o usuário cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPost}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Put Users",
					"item": [
						{
							"name": "Pré-request PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar  um usuário com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um usuário com sucesso - somente campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um usuário - gender female",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um usuário - gender male",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"male\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um usuário - status active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"male\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um usuário - status inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"male\");",
											"    pm.expect(jsonData.status).to.eq(\"inactive\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Alterar um usuário sem informar os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Alterar um usuário inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"email\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/123456",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"123456"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Alterar um usuário - campo nome inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"2 @ 1345 Ma\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Alterar um usuário - campo email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"email\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Alterar um usuário - campo gender inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"gender\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, can be male or female\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"asdf\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Alterar um usuário - campo status inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"status\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPut}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patch Users",
					"item": [
						{
							"name": "Pré-request PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar  um usuário com sucesso - name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePatch\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePatch}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar  um usuário com sucesso - email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePatch\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{emailPatch}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um usuário com sucesso - gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePatch\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"female\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um usuário com sucesso - status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePatch\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um usuário - campo nome inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nome\": \"@ 123 Ma\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um usuário - campo email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"email\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Alterar um usuário - campo gender inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"gender\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, can be male or female\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Alterar um usuário - campo status inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"status\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPatch}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Users",
					"item": [
						{
							"name": "Pré Request - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdDelete\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Excluir um usuário com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.text();",
											"    pm.expect(jsonData.length).to.eq(0);    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Excluir um usuário inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/@355",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"@355"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Excluir um usuário sem informar um id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Excluir um usuário com post existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Excluir um usuário com post e comentário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Excluir um usuário com to do",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pós-request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.be.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdDelete}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "Get Posts",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
											"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
											"    pm.collectionVariables.set(\"vbody\", jsonData[0].body); ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar um post específico - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"   ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pela user_id, title e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}&title={{vtitle}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo user_id e title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}&title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo user_id e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtrar pelo title e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts?title={{vtitle}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Buscar um post que não existe pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/9999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Buscar um post por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"sdsdsdsdsd"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Buscar um post por um user_id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd?user_id=99999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"sdsdsdsdsd"
									],
									"query": [
										{
											"key": "user_id",
											"value": "99999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Buscar post por um title inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd?title=enzle",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"sdsdsdsdsd"
									],
									"query": [
										{
											"key": "title",
											"value": "enzle"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar post por um body inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd?body=adedleoec",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"sdsdsdsdsd"
									],
									"query": [
										{
											"key": "body",
											"value": "adedleoec"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Posts",
					"item": [
						{
							"name": "Busca o post cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Cadastrar um POST com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"postIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(3044);",
											"    pm.expect(jsonData.title).to.eq(\"Teste\");",
											"    pm.expect(jsonData.body).to.eq(\"Teste API\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 7019,\n    \"title\": \"Teste\",\n    \"body\": \"Teste API\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Cadastrar um post com sucesso - somente campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"postIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(3044);",
											"    pm.expect(jsonData.title).to.eq(\"Teste\");",
											"    pm.expect(jsonData.body).to.eq(\"Teste API\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3044,\n    \"title\": \"Teste\",\n    \"body\": \"Teste API\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Cadastrar um post sem informar os campos obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"  ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"user_id\");",
											"    pm.expect(jsonData[1].message).to.eq(\"can't be blank, is not a number\");",
											"",
											"    pm.expect(jsonData[2]).to.have.property(\"field\");",
											"    pm.expect(jsonData[2]).to.have.property(\"message\");",
											"    pm.expect(jsonData[2].field).to.eq(\"title\");",
											"    pm.expect(jsonData[2].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[3]).to.have.property(\"field\");",
											"    pm.expect(jsonData[3]).to.have.property(\"message\");",
											"    pm.expect(jsonData[3].field).to.eq(\"body\");",
											"    pm.expect(jsonData[3].message).to.eq(\"can't be blank\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Cadastrar um post em duplicidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"id\");",
											"    pm.expect(jsonData[0].message).to.eq(\"has already been taken\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1860,\n    \"user_id\": 3044,\n    \"title\": \"Teste\",\n    \"body\": \"Teste API\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Cadastrar um post com user_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"user_id\");",
											"    pm.expect(jsonData[1].message).to.eq(\"is not a number\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"asddsd\",\n    \"title\": \"Teste\",\n    \"body\": \"Teste API\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Cadastrar um post com title em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"title\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3044,\n    \"title\": \" \",\n    \"body\": \"Teste API\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Cadastrar um post com body em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3044,\n    \"title\": \"Teste\",\n    \"body\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleta post cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPost}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Put Posts",
					"item": [
						{
							"name": "Pré-request PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"postIdPut\", jsonData.id);",
											"    pm.collectionVariables.set(\"userPut\", jsonData.user_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{$randomInt}},\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar um post com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"postIdPut\"));",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userPut\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePut\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodyPut\"));",
											"   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userPut}},\n    \"title\": \"{{titlePut}}\",\n    \"body\": \"{{bodyPut}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um post com sucesso - somente campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"postIdPut\"));",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userPut\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePut\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodyPut\"));",
											"   ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userPut}},\n    \"title\": \"{{titlePut}}\",\n    \"body\": \"{{bodyPut}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um post sem informar os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um post inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"@ 123 Ma\",\n    \"user_id\": \"@ 123\",\n    \"title\": \"{{titlePut}}\",\n    \"body\": \"{{bodyPut}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um post com sucesso - campo user_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"@ 123\",\n    \"title\": \"{{titlePut}}\",\n    \"body\": \"{{bodyPut}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um post com sucesso - campo title inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"title\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userPut}},\n    \"title\": 1234,\n    \"body\": \"{{bodyPut}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] -  Alterar um post com sucesso - campo body inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userPut}},\n    \"title\": \"{{titlePut}}\",\n    \"body\": 1234\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPut}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patch Posts",
					"item": [
						{
							"name": "Pré-request PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"postIdPatch\", jsonData.id);",
											"    pm.collectionVariables.set(\"userPatch\", jsonData.user_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{$randomInt}},\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar um post com sucesso - title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"postIdPatch\"));",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userPatch\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePatch\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodytPatch\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{titlePatch}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um post com sucesso - body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"postIdPatch\"));",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userPatch\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePatch\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodyPatch\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set(\"bodyPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"{{bodyPatch}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um post - campo user_id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"bodyPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": \"@123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um post - campo title inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"title\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set(\"bodyPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 1231\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um post - campo body inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set(\"bodyPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": 1231\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdPatch}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Posts",
					"item": [
						{
							"name": "Pré Request - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"postIdDelete\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{$randomInt}},\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Excluir um post com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.text();",
											"    pm.expect(jsonData.length).to.eq(0);    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Excluir um post inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/122333344",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"122333344"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Excluir um post sem informar o id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pós-request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.be.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{postIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{postIdDelete}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get Comments",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vpost_id\", jsonData[0].post_id);",
											"    pm.collectionVariables.set(\"vname\", jsonData[0].name);",
											"    pm.collectionVariables.set(\"vemail\", jsonData[0].email);",
											"    pm.collectionVariables.set(\"vbody\", jsonData[0].body);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar um comments específico - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"   ",
											"        pm.expect(jsonData).to.have.property(\"id\");",
											"        pm.expect(jsonData).to.have.property(\"post_id\");",
											"        pm.expect(jsonData).to.have.property(\"name\");",
											"        pm.expect(jsonData).to.have.property(\"email\");",
											"        pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"        pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{vid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo post_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{vpost_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?name={{vname}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pela body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo post_id, name, email e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&name={{vname}}&email={{vemail}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{vpost_id}}"
										},
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo post_id e name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&name={{vname}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{vpost_id}}"
										},
										{
											"key": "name",
											"value": "{{vname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtrar pelo post_id, email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{vpost_id}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Filtrar pelo post_id e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{vpost_id}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Filtrar pelo name e email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?name={{vname}}&email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Filtrar pelo name e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"        ",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?name={{vname}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Filtrar pelo email e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments?email={{vemail}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar um comments que não existe pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-015] - Buscar um comments por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"asdfg"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar comments por um post_id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/asdfg?post_id=99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"asdfg"
									],
									"query": [
										{
											"key": "post_id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-017] - Buscar comments por um email inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/asdfg?email=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"asdfg"
									],
									"query": [
										{
											"key": "email",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-018] - Buscar comments por um email inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/asdfg?name=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"asdfg"
									],
									"query": [
										{
											"key": "name",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-019] - Buscar comments por um email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/asdfg?email=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"asdfg"
									],
									"query": [
										{
											"key": "email",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-020] - Buscar comments por um body inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/asdfg?body=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"asdfg"
									],
									"query": [
										{
											"key": "body",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Comments",
					"item": [
						{
							"name": "[CT001] - Cadastrar um comentário com sucesso - todos os campos Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"commentIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"  ",
											"    pm.expect(jsonData.post_id).to.eq(1324);",
											"    pm.expect(jsonData.name).to.eq(\"Miguel Silva\");",
											"    pm.expect(jsonData.email).to.eq(\"miguel@educa.com\");",
											"    pm.expect(jsonData.body).to.eq(\"Teste API\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"1973\",\n    \"name\": \"Miguel Silva\",\n    \"email\": \"miguel@educa.com\",\n    \"body\": \"Teste API\"    \n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002] - Cadastrar um comentário com sucesso - somente os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"commentIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"  ",
											"    pm.expect(jsonData.post_id).to.eq(1324);",
											"    pm.expect(jsonData.name).to.eq(\"Miguel Silva\");",
											"    pm.expect(jsonData.email).to.eq(\"miguel@educa.com\");",
											"    pm.expect(jsonData.body).to.eq(\"Teste API\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"1324\",\n    \"name\": \"Miguel Souza\",\n    \"email\": \"miguel2@educa.com\",\n    \"body\": \"Teste API\"    \n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003] - Cadastrar um comentário  sem informar os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"post\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"post_id\");",
											"    pm.expect(jsonData[1].message).to.eq(\"can't be blank, is not a number\");",
											"",
											"    pm.expect(jsonData[2]).to.have.property(\"field\");",
											"    pm.expect(jsonData[2]).to.have.property(\"message\");",
											"    pm.expect(jsonData[2].field).to.eq(\"name\");",
											"    pm.expect(jsonData[2].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[3]).to.have.property(\"field\");",
											"    pm.expect(jsonData[3]).to.have.property(\"message\");",
											"    pm.expect(jsonData[3].field).to.eq(\"email\");",
											"    pm.expect(jsonData[3].message).to.eq(\"can't be blank, is invalid\");",
											"",
											"    pm.expect(jsonData[4]).to.have.property(\"field\");",
											"    pm.expect(jsonData[4]).to.have.property(\"message\");",
											"    pm.expect(jsonData[4].field).to.eq(\"body\");",
											"    pm.expect(jsonData[4].message).to.eq(\"can't be blank\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004] - Cadastrar um comentário em duplicidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"has already been taken\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 2128,\n    \"post_id\": 1324,\n    \"name\": \"Miguel Silva\",\n    \"email\": \"miguel@educa.com\",\n    \"body\": \"Teste API\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005] - Cadastrar um comentário com post_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"post\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"post_id\");",
											"    pm.expect(jsonData[1].message).to.eq(\"is not a number\");",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"@ 123 ma\",\n    \"name\": \"Miguel Silva\",\n    \"email\": \"miguel@educa.com\",\n    \"body\": \"Teste API\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006] - Cadastrar um comentário com email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"  ",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"1519\",\n    \"name\": \"Miguel Silva\",\n    \"email\": \"miguleeduca.com\",\n    \"body\": \"Teste API\"    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007] - Cadastrar um comentário com nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"name\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"  ",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"1519\",\n    \"name\": \"\",\n    \"email\": \"migule@educa.com\",\n    \"body\": \"Teste API\"    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008] - Cadastrar um comentário com email em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											" ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, is invalid\");",
											"",
											"  ",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"1519\",\n    \"name\": \"Miguel\",\n    \"email\": \"\",\n    \"body\": \"Teste API\"    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009] - Cadastrar um comentário com body em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"  ",
											" ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"1519\",\n    \"name\": \"Miguel\",\n    \"email\": \"miguel@educa.com\",\n    \"body\": \"\"    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca o comment cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleta comments cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPost}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Put Comments",
					"item": [
						{
							"name": "Pré-request PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"commentIdPut\", jsonData.id);",
											"    pm.collectionVariables.set(\"postComment\", jsonData.post_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{$randomInt}},\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar um comment com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.post_id).to.eq(pm.collectionVariables.get(\"postComment\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodyPut\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{postComment}},\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"body\": \"{{bodyPut}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um comments com sucesso - somente campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.post_id).to.eq(pm.collectionVariables.get(\"postComment\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodyPut\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{postComment}},\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"body\": \"{{bodyPut}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um comments sem informar os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um comments inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{postComment}},\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"body\": \"{{bodyPut}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/@123",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"@123"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um comments com campo post_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"post\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"@1234\",\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"body\": \"{{bodyPut}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um comments com campo email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"bodyPut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{postComment}},\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"email\",\n    \"body\": \"{{bodyPut}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Alterar um comments com campo body inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{postComment}},\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"body\": \"@123 _ Ma\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPut}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patch Comments",
					"item": [
						{
							"name": "Pré-request PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"commentIdPacth\", jsonData.id);",
											"    pm.collectionVariables.set(\"postComment\", jsonData.post_id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{$randomInt}},\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar um comments com sucesso - name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.post_id).to.eq(pm.collectionVariables.get(\"postComment\"));",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePatch\"));",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomePatch\", pm.variables.replaceIn('{{$randomFullName}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{nomePatch}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um comments com sucesso - email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.post_id).to.eq(pm.collectionVariables.get(\"postComment\"));",
											"",
											"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPatch\"));",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"emailPatch\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{emailPatch}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um comments com sucesso - body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"post_id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"",
											"    pm.expect(jsonData.post_id).to.eq(pm.collectionVariables.get(\"postComment\"));",
											"    pm.expect(jsonData.body).to.eq(pm.collectionVariables.get(\"bodyPatch\"));",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"bodyPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"{{bodyPatch}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um comments - campo post_id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"post\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": \"@1233\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um comments - campo name inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"name\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": 123\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um comments - campo email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"email\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Alterar um comments - campo body inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"is invalid\");",
											"",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": 12233333\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdPacth}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdPacth}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Comments",
					"item": [
						{
							"name": "Pré Request - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"commentIdDelete\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"post_id\": {{$randomInt}},\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Excluir um comments com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.text();",
											"    pm.expect(jsonData.length).to.eq(0);    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Excluir um comment inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/12444455",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"12444455"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Excluir um comment sem informar o id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Pós-request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.be.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/comments/{{commentIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"comments",
										"{{commentIdDelete}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Todos",
			"item": [
				{
					"name": "Get Todos",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
											"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
											"    pm.collectionVariables.set(\"vdue_on\", jsonData[0].due_on);",
											"    pm.collectionVariables.set(\"vstatus\", jsonData[0].status);",
											"       ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar um todo específico - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"       ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{vid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?due_on={{vdue_on}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pela status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo user_id, title, due_on e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&title={{vtitle}}&due_on={{vdue_on}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtar pelo user_id e title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtar pelo user_id e due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"       ",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&due_on={{vdue_on}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Filtar pelo user_id e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{vuser_id}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Filtrar pelo title e due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"        ",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?title={{vtitle}}&due_on={{vdue_on}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Filtrar pelo title e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?title={{vtitle}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Filtrar pelo due_on e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?due_on={{vdue_on}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar um usuário que não existe pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/99999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"99999999"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-015] - Buscar um usuário por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/sdsedewd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"sdsedewd"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar por um use_id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/sdsedewd?user_id=999999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"sdsedewd"
									],
									"query": [
										{
											"key": "user_id",
											"value": "999999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar por um use_id inexistente Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/sdsedewd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"sdsedewd"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-017] - Buscar usuário por um title inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/sdsedewd?title=fdfdgrrere",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"sdsedewd"
									],
									"query": [
										{
											"key": "title",
											"value": "fdfdgrrere"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-018] - Buscar usuário por um due_on inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/sdsedewd?due_on=fdfdfdfgd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"sdsedewd"
									],
									"query": [
										{
											"key": "due_on",
											"value": "fdfdfdfgd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-019] - Buscar usuário por um status inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos?status=sdfsdfsfs",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									],
									"query": [
										{
											"key": "status",
											"value": "sdfsdfsfs"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Todos",
					"item": [
						{
							"name": "[CT001] - Cadastrar um todo com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(3555);",
											"    pm.expect(jsonData.title).to.eq(\"Teste\");",
											"    pm.expect(jsonData.due_on).to.eq(\"2022-08-17T00:00:00.000+05:30\");",
											"    pm.expect(jsonData.status).to.eq(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"user_id\": 3555,\n    \"title\": \"Teste\",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002] - Cadastrar um todo com sucesso - somento os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(3555);",
											"    pm.expect(jsonData.title).to.eq(\"Teste\");",
											"    pm.expect(jsonData.due_on).to.eq(\"2022-08-17T00:00:00.000+05:30\");",
											"    pm.expect(jsonData.status).to.eq(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3555,\n    \"title\": \"Teste\",\n    \"status\": \"completed\"   \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003] - Cadastrar um todo - status completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.status).to.eq(\"completed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3555,\n    \"title\": \"Teste\",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"completed\"   \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004] - Cadastrar um todo - status pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.status).to.eq(\"pending\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3555,\n    \"title\": \"Teste\",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"pending\"   \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005] - Cadastrar um todo - sem os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"title\");",
											"    pm.expect(jsonData[1].message).to.eq(\"can't be blank\");",
											"",
											"    pm.expect(jsonData[2]).to.have.property(\"field\");",
											"    pm.expect(jsonData[2]).to.have.property(\"message\");",
											"    pm.expect(jsonData[2].field).to.eq(\"user_id\");",
											"    pm.expect(jsonData[2].message).to.eq(\"can't be blank, is not a number\");",
											"",
											"    pm.expect(jsonData[3]).to.have.property(\"field\");",
											"    pm.expect(jsonData[3]).to.have.property(\"message\");",
											"    pm.expect(jsonData[3].field).to.eq(\"status\");",
											"    pm.expect(jsonData[3].message).to.eq(\"can't be blank, can be pending or completed\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006] - Cadastrar um todo em duplicidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"id\");",
											"    pm.expect(jsonData[0].message).to.eq(\"has already been taken\");",
											" ",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \n    \"id\": 1809,\n    \"user_id\": 3555,\n    \"title\": \"Teste\",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007] - Cadastrar um todo com user_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											" ",
											"    pm.expect(jsonData[1]).to.have.property(\"field\");",
											"    pm.expect(jsonData[1]).to.have.property(\"message\");",
											"    pm.expect(jsonData[1].field).to.eq(\"user_id\");",
											"    pm.expect(jsonData[1].message).to.eq(\"is not a number\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \n    \"user_id\": \"@ 13 Ma\",\n    \"title\": \"Teste\",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008] - Cadastrar um todo com title em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"title\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"user_id\": 3537,\n    \"title\": \" \",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009] - Cadastrar um todo com due_on em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"due_on\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"user_id\": 3537,\n    \"title\": \"Teste\",\n    \"due_on\": \" \",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010] - Cadastrar um todo com status inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"status\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, can be pending or completed\");",
											"",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \n    \"user_id\": 3537,\n    \"title\": \"Teste\",\n    \"due_on\": \"2022-08-17T00:00:00.000+05:30\",\n    \"status\": \"@ 12 Ma\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca o comment cadastrado Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleta comments cadastrado Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPost}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Put Todos",
					"item": [
						{
							"name": "Pré-request PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdPut\", jsonData.id);",
											"    pm.collectionVariables.set(\"userTodo\", jsonData.user_id);",
											"    pm.collectionVariables.set(\"dueonTodo\", jsonData.due_on);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{$randomInt}},\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar um todos com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePut\"));",
											"    pm.expect(jsonData.due_on).to.eq(pm.collectionVariables.get(\"dueonTodo\"));",
											"    pm.expect(jsonData.status).to.eq(pm.collectionVariables.get(\"completed\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonTodo\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonTodo}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um todos com sucesso - somente os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePut\"));",
											"    pm.expect(jsonData.due_on).to.eq(pm.collectionVariables.get(\"dueonPut\"));",
											"    pm.expect(jsonData.status).to.eq(pm.collectionVariables.get(\"pending\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonPut\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonPut}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Alterar um usuário - status completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePut\"));",
											"    pm.expect(jsonData.due_on).to.eq(pm.collectionVariables.get(\"dueonPut\"));",
											"    pm.expect(jsonData.status).to.eq(pm.collectionVariables.get(\"completed\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonPut\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonPut}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Alterar um usuário - status pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePut\"));",
											"    pm.expect(jsonData.due_on).to.eq(pm.collectionVariables.get(\"dueonPut\"));",
											"    pm.expect(jsonData.status).to.eq(pm.collectionVariables.get(\"pending\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonPut\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonPut}}\",\n    \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] -  Alterar um todos sem infomar os campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um todos inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonTodo\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonTodo}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/123456677",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"123456677"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Alterar um todos com user_id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"user\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonTodo\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 123456778,\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonTodo}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Alterar um todos com title inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"body\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonTodo\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"1223333\",\n    \"due_on\": \"{{dueonTodo}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Alterar um todos com due_on inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"due_on\");",
											"    pm.expect(jsonData[0].message).to.eq(\"must exist\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonTodo\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": 1111111,\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Alterar um todos com status inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"status\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, can be pending or completed\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePut\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonTodo\", pm.variables.replaceIn('{{$randomDateFuture}}'));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonTodo}}\",\n    \"status\": \"status\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPut}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPut}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patch Todos",
					"item": [
						{
							"name": "Pré-request PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdPatch\", jsonData.id);",
											"    pm.collectionVariables.set(\"userTodo\", jsonData.user_id);",
											"    pm.collectionVariables.set(\"dueonPatch\", jsonData.due_on);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{$randomInt}},\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Alterar um todos com sucesso - title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.title).to.eq(pm.collectionVariables.get(\"titlePatch\"));",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{titlePatch}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Alterar um todos com sucesso - due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.due_on).to.eq(pm.collectionVariables.get(\"dueonPatch\"));",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dueonPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"due_on\": \"{{dueonPatch}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] -  Alterar um todos com sucesso - status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.user_id).to.eq(pm.collectionVariables.get(\"userTodo\"));",
											"    pm.expect(jsonData.status).to.eq(\"pending\");",
											" ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"titlePatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"pm.collectionVariables.set(\"dueonPatch\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] -  Alterar um todos - campo title inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"title\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 12356\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Alterar um todos - campo due_on inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"due_on\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"due_on\": 12356\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPatch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Alterar um todos - campo status inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");",
											"    pm.expect(jsonData[0]).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"status\");",
											"    pm.expect(jsonData[0].message).to.eq(\"can't be blank, can be pending or completed\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"status\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdPatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdPatch}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Todos",
					"item": [
						{
							"name": "Pré Request - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"todoIdDelete\", jsonData.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{userTodo}},\n    \"title\": \"{{titlePut}}\",\n    \"due_on\": \"{{dueonPut}}\",\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-001] - Excluir um todo com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.text();",
											"    pm.expect(jsonData.length).to.eq(0);    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdDelete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Excluir um todo inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/1234455",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"1234455"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Excluir um todo sem informar o id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Pós-request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.be.eq(\"Resource not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/todos/{{todoIdDelete}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"todos",
										"{{todoIdDelete}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User/Post",
			"item": [
				{
					"name": "Get User/Post",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os posts de um usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
											"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
											"    pm.collectionVariables.set(\"vbody\", jsonData[0].body);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar todos os posts de um id de usuario especifico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"body\");",
											"    ",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo id, title e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}&title={{vtitle}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pelo id e title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}&title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo id e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo title e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?title={{vtitle}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Buscar um post que não existe pelo user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/999999999/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"999999999",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Buscar um post por um user_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/asdfg/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"asdfg",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Buscar um post por um id que não existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id=999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Buscar um post por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Buscar post por um title inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "id",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar post por um body inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?body=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"posts"
									],
									"query": [
										{
											"key": "body",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User/Todos",
			"item": [
				{
					"name": "Get User/Todos",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os todos de um usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
											"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
											"    pm.collectionVariables.set(\"vdue_on\", jsonData[0].due_on);",
											"    pm.collectionVariables.set(\"vstatus\", jsonData[0].status);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar todos os todos de um id de user especifico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"   ",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"user_id\");",
											"    pm.expect(jsonData).to.have.property(\"title\");",
											"    pm.expect(jsonData).to.have.property(\"due_on\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?due_on={{vdue_on}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pelo id, title, due_on e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&title={{vtitle}}&due_on={{vdue_on}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo id e title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&title={{vtitle}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "title",
											"value": "{{vtitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo id e due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&due_on={{vdue_on}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtrar pelo id e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Filtrar pelo title e due_on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title={{vtitle}}&due_on={{vdue_on}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Filtrar pelo title e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title={{vtitle}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "{{vtitle}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Filtrar pelo due_on e status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"user_id\");",
											"        pm.expect(item).to.have.property(\"title\");",
											"        pm.expect(item).to.have.property(\"due_on\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?due_on={{vdue_on}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "due_on",
											"value": "{{vdue_on}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Buscar um todos que não existe pelo use_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/99999/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"99999",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar um todos por um user_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/asdfg/todos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"asdfg",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-015] - Buscar um todos por um id que não existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id=99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar um todos por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?d=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "d",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-017] - Buscar todos por um title inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "title",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-018] - Buscar todos por um due_on inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?due_on=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "due_on",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-019] - Buscar todos por um status inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?status=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vuser_id}}",
										"todos"
									],
									"query": [
										{
											"key": "status",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Post/Comments",
			"item": [
				{
					"name": "Get Posts/Comments",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os comments de um post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vpost_id\", jsonData[0].post_id);",
											"    pm.collectionVariables.set(\"vname\", jsonData[0].name);",
											"    pm.collectionVariables.set(\"vemail\", jsonData[0].email);",
											"    pm.collectionVariables.set(\"vbody\", jsonData[0].body);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar todos os comments de um id de post especifico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"        pm.expect(jsonData).to.have.property(\"id\");",
											"        pm.expect(jsonData).to.have.property(\"post_id\");",
											"        pm.expect(jsonData).to.have.property(\"name\");",
											"        pm.expect(jsonData).to.have.property(\"email\");",
											"        pm.expect(jsonData).to.have.property(\"body\");",
											"        ",
											"        pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] -  Filtrar pelo name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name={{vname}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pelo id, name, email e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&name={{vname}}&email={{vemail}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo id e name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&name={{vname}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "name",
											"value": "{{vname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo id e email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtrar pelo id e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "id",
											"value": "{{vid}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Filtrar pelo name e email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name={{vname}}&email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Filtrar pelo name e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name={{vname}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Filtrar pelo email e body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"post_id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"body\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?email={{vemail}}&body={{vbody}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "body",
											"value": "{{vbody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Buscar um comment que não existe pelo post_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/99999/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"99999",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar um comments por um post_id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {})",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/asdfg/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"asdfg",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-015] - Buscar um comments por um id que não existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id=99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar um comments por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-017] - Buscar comments por um name inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "name",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-018] - Buscar comments por um email inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?email=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "email",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-019] - Buscar comments por um body inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?body=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"posts",
										"{{vpost_id}}",
										"comments"
									],
									"query": [
										{
											"key": "body",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "2a1ec3de45d6886390428ac955d22dbb9f7efe66982878c6792a002de557d13d",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://gorest.co.in",
			"type": "string"
		},
		{
			"key": "vid",
			"value": ""
		},
		{
			"key": "vname",
			"value": ""
		},
		{
			"key": "vemail",
			"value": ""
		},
		{
			"key": "vgender",
			"value": ""
		},
		{
			"key": "vstatus",
			"value": ""
		},
		{
			"key": "vuser_id",
			"value": ""
		},
		{
			"key": "vtitle",
			"value": ""
		},
		{
			"key": "vdue_on",
			"value": ""
		},
		{
			"key": "vbody",
			"value": ""
		},
		{
			"key": "vpost_id",
			"value": ""
		},
		{
			"key": "userIdPost",
			"value": ""
		},
		{
			"key": "postIdPost",
			"value": ""
		},
		{
			"key": "commentIdPost",
			"value": ""
		},
		{
			"key": "todoIdPost",
			"value": ""
		},
		{
			"key": "userIdPut",
			"value": ""
		},
		{
			"key": "nomePut",
			"value": ""
		},
		{
			"key": "emailPut",
			"value": ""
		},
		{
			"key": "userIdPatch",
			"value": ""
		},
		{
			"key": "nomePatch",
			"value": ""
		},
		{
			"key": "emailPatch",
			"value": ""
		},
		{
			"key": "userIDelete",
			"value": ""
		},
		{
			"key": "userIdDelete",
			"value": ""
		},
		{
			"key": "postIdPut",
			"value": ""
		},
		{
			"key": "titlePut",
			"value": ""
		},
		{
			"key": "bodyPut",
			"value": ""
		},
		{
			"key": "userPut",
			"value": ""
		},
		{
			"key": "userIdPostPut",
			"value": ""
		},
		{
			"key": "commentsIdPut",
			"value": ""
		},
		{
			"key": "postComment",
			"value": ""
		},
		{
			"key": "commentIdPut",
			"value": ""
		},
		{
			"key": "todoIdPut",
			"value": ""
		},
		{
			"key": "userTodo",
			"value": ""
		},
		{
			"key": "dueonPut",
			"value": ""
		},
		{
			"key": "dueonTodo",
			"value": ""
		},
		{
			"key": "postIdPatch",
			"value": ""
		},
		{
			"key": "titlePatch",
			"value": ""
		},
		{
			"key": "userPatch",
			"value": ""
		},
		{
			"key": "bodyPatch",
			"value": ""
		},
		{
			"key": "commentIdPacth",
			"value": ""
		},
		{
			"key": "todoIdPatch",
			"value": ""
		},
		{
			"key": "dueonPatch",
			"value": ""
		},
		{
			"key": "postIdDelete",
			"value": ""
		},
		{
			"key": "commentIddDelete",
			"value": ""
		},
		{
			"key": "todoIdDelete",
			"value": ""
		},
		{
			"key": "commentIdDelete",
			"value": ""
		}
	]
}